#import necessary Modules
from tkinter import *
from tkinter import messagebox

#Main Checkout Function
def checkout():

    #Creates a window for the Checkout
    window = Tk()
    window.title("Checkout")
    window.geometry('500x350')
    window.config(bg='white')


    #Gets all variables that are needed
    global order
    global i
    global orders
    order={}
    orders = []
    i= -1

    #Menu Dictionary
    hot_drinks = {"Hot chocolate $5": 5, "Coffee $5": 5,"Tea $5": 5}
    cold_drinks ={"Soft Drink $4": 4, "Ginger Beer $3.50": 3.50, "Iced Drinks $5": 5,"Milkshake $5": 5}
    snacks ={"Potato Wedges $4":4,"Pies $4":4,"Greek Salad $5":5,"Sandwiches $5":5}
    special = {"Nachos $8":8,"Chicken Burger $7.50": 7.50,"Sushi $8": 8,"Pizza $8": 8}
    lunch = {"Noodles $7":8,"Steam Buns $7":7,"Meatball Sub $7":7,"Wraps $7.50":7.50,"Hot Dog $8":8}
    menu = {}
    menu.update(hot_drinks)
    menu.update(cold_drinks)
    menu.update(snacks)
    menu.update(special)
    menu.update(lunch)


    ################################################FUNCTIONS ######################################################################

    #------------------------------------------- Add Order Function -----------------------------------------------#

    def add_order():
        
        #Converts quantity entry into an integer and makes sure that it can only be a whole number
        try:

            quantity = int(quantity_entrybox.get())

        except ValueError:
            messagebox.showerror("Quantity Error","Quantity must be a whole number")
        


        #Converts their option chosen into a variable (item) and makes sure that it is an appropriate item
        item = Menu1.get()

        if item == "Menu":
            messagebox.showerror("Item Error","Menu is not an item, please choose an appropriate item within the menu")
            return
        


        #Make Orders into nothing and then gets orders item and quantity 
        order[item] = order.get(item,0) + quantity
        

        #It then adds all the order information to the specific user
        orders.append(order)


        #When complete displays a message saying order is placed
        messagebox.showinfo("Order Complete","Order Placed Succefully")

    

    #---------------------------------------------View order Function ----------------------------------#
        

    def view_order():

        #Gets orders and i
        global order
        global i

        
        #Clears out frame so that new values are accounted for
        for label in view_order_frame.grid_slaves():
            label.destroy()


        #For each item and quantity in order
        for item, quantity in order.items():

            #I increses by 1, therefore changing the view order label row by 1 each newlabel
            i+=1

            #Gets the price for certain item chosen and also creates a total by multiplying price by quantity
            price = menu[item]
            total = price * quantity

            #Makes a Label displaying the item, quantity and total placed within the view order frame
            view_order_label = Label(view_order_frame,text=(f"{item} x {quantity} = ${total}"),fg='black',bg='gray',font=('Microsoft Yahei UI Light',12))
            view_order_label.grid(row=i,column=0)


        #Displays the receipt showing the GST Total and the Total amount owed
        messagebox.showinfo("Receipt",f"GST Total = ${round(((sum(menu[item]*quantity for item,quantity in order.items())/100) * 15))} \n Total: ${round(sum(menu[item]*quantity for item, quantity in order.items()) * 1.15)}") 



    ############################################### VISUAL DISPLAY #############################################################

    #---------------------------------------------------- Frames--------------------------------------------#
    
    #Creates the view order frame that displays items, price and quantity when viewing order 
    view_order_frame = Frame(window,bg='gray',width=480,height=200)
    view_order_frame.grid(row=0,column=0,padx=10,sticky=NSEW)
    view_order_frame.grid_propagate(0)


    #-------------------------------------------------Labels-------------------------------------------------#

    #Item Chosen Label
    item_chosen_label = Label(window,text="Item Chosen:",bg='white',fg='black',font=('Microsoft Yahei UI Light',12))
    item_chosen_label.place(x=10,y=250)

    #Quantity Label
    quantity_chosen_label = Label(window,text="Quantity: ",bg='white',fg='black',font=('Microsoft Yahei UI Light',12))
    quantity_chosen_label.place(x=280,y=250)


    #--------------------------------------------------Entry Boxes ----------------------------------------#

    #Quantity entrybox
    quantity_entrybox = Entry(window,bg='white',fg='black',font=('Microsoft Yahei UI Light',12), width =10)
    quantity_entrybox.place(x=360,y=250)


    #-------------------------------------------------- Drop Down Box --------------------------------------------#

    #Gets items from dictionary
    Menu1 = StringVar()
    Menu1.set("Menu")

    #Displays items in dropbox form
    item_chosen = OptionMenu(window,Menu1,*menu)
    item_chosen.place(x=120,y=250)


    #---------------------------------------------------- Buttons -----------------------------------------------------#

    #Add order Button
    add_order_button = Button(window,text="Add To Order",fg="black",bg='orange',font=('Microsoft Yahei UI Light',12), width = 25, height=1,command=add_order)
    add_order_button.place(x=10,y=300)

    #View order Button
    view_order_button = Button(window,text="View Order",fg="black",bg="light green",font=('Microsoft Yahei UI Light',12),width=25, height=1,command=view_order)
    view_order_button.place(x=255,y=300)

    


    ########################################################## END OF CHECKOUT FUNCTION ###########################################


    #Runs the program
    window.mainloop()



